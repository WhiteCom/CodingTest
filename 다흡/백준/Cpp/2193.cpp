#include <iostream>
#include <vector>

using namespace std;

// 0, 1 을 마지막에 붙여보면서 해당 숫자가 pinary number 인지 체크
	// ( dp[1] )
	// 1
	// ( dp[2] : 1)
	// 1 + 0 => 10
	// 1 + 1 => 11 : X
	// ( dp[3] : 2 )
	// 10 + 0 => 100
	// 10 + 1 => 101
	// ( dp[4] : 3 )
	// 100 + 0 => 1000
	// 100 + 1 => 1001
	// 101 + 0 => 1010
	// 101 + 1 => 1011 : X
	// ( dp[5] : 5 )
	// 1000 + 0 => 10000
	// 1000 + 1 => 10001
	// 1001 + 0 => 10010
	// 1001 + 1 => 10011 : X
	// 1010 + 0 => 10100
	// 1010 + 1 => 10101
	// ( dp[6] : 8 )
	// 10000 + 0 => 100000
	// 10000 + 1 => 100001
	// 10001 + 0 => 100010
	// 10001 + 1 => 100011 : X
	// 10010 + 0 => 100100
	// 10010 + 1 => 100101
	// 10100 + 0 => 101000
	// 10100 + 1 => 101001
	// 10101 + 0 => 101010
	// 10101 + 1 => 101011 : X
	// ( dp[7] : 13 )
	// 100000 + 0 => 1000000
	// 100000 + 1 => 1000001
	// 100001 + 0 => 1000010
	// 100001 + 1 => 1000011 : X
	// 100010 + 0 => 1000100
	// 100010 + 1 => 1000101
	// 100100 + 0 => 1001000
	// 100100 + 1 => 1001001
	// 100101 + 0 => 1001010
	// 100101 + 1 => 1001011 : X
	// 101000 + 0 => 1010000
	// 101000 + 1 => 1010001
	// 101001 + 0 => 1010010
	// 101001 + 1 => 1010011 : X
	// 101010 + 0 => 1010100
	// 101010 + 1 => 1010101
	// ( 규칙 ) 마지막 숫자가 0으로 끝난다, 0, 1 둘다 붙이기 가능.
	// ( 규칙2 ) 마지막 숫자가 1으로 끝난다, 1만 붙이기 가능.

int main()
{
	int N;
	cin >> N;
	vector<long long> dp(N + 1, 0);
	
	/*
	위에서 나열한 숫자들의 규칙 참고
	dp[1] = 1;
	dp[2] = 2;
	dp[3] = 2
	dp[4] = dp[3] + dp[2];
	dp[5] = dp[4] + dp[3];
	dp[6] = dp[5] + dp[4];
	dp[7] = dp[6] + dp[5];

	따라서, dp[i] = dp[i-1] + dp[i-2] 성립 (i > 3)
	*/

	// 입력으로 N = 1, 2, 3 으로 들어오는 경우, 
	// 배열 인덱스 범위 넘어가지않도록 함수 종료조건필요.
	dp[1] = 1;
	if (N < 2)
	{
		cout << dp[N];
		return 0;
	}
	dp[2] = 1;
	if (N < 3)
	{
		cout << dp[N];
		return 0;
	}
	dp[3] = 2;
	if (N < 4)
	{
		cout << dp[N];
		return 0;
	}

	for (int i = 4; i <= N; ++i)
	{
		dp[i] = dp[i - 1] + dp[i - 2];
	}

	cout << dp[N] << '\n';


	return 0;
}